openapi: "3.0.2"

info:
  title: "rororo"
  version: "2.0.0b3"
  contact:
    name: "Igor Davydenko (developer)"
    url: "https://igordavydenko.com"
    email: "iam@igordavydenko.com"
  license:
    name: "BSD-3-Clause"
    url: "https://opensource.org/licenses/BSD-3-Clause"

servers:
  - url: "/api"
    x-rororo-level: "test"

  - url: "/dev-api"
    x-rororo-level: ["dev"]

paths:
  "/hello":
    get:
      operationId: "hello_world"
      parameters:
        - name: "name"
          in: "query"
          required: false
          schema:
            type: "string"
            minLength: 1
        - name: "email"
          in: "query"
          required: false
          schema:
            type: "string"
            format: "email"
      responses:
        "200":
          description: "Dummy response."
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  message:
                    type: "string"
                    minLength: 1
                  email:
                    type: "string"
                    format: "email"
                required: ["message", "email"]

  "/array":
    post:
      operationId: "retrieve_array_from_request_body"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UniqueStrArray"
      responses:
        "200":
          description: "Array from request."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UniqueStrArray"

  "/download.zip":
    get:
      operationId: "retrieve_zip"
      responses:
        "200":
          description: "ZIP file content."
          content:
            application/zip:
              schema:
                type: "string"
                format: "binary"

  "/empty":
    get:
      operationId: "retrieve_empty"
      responses:
        "204":
          description: "Empty response."

  "/nested-object":
    post:
      operationId: "retrieve_nested_object_from_request_body"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NestedObject"
      responses:
        "200":
          description: "Nested object from request."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NestedObject"
          headers:
            X-Content-Data-Type:
              schema:
                type: "string"
                minLength: 1
            X-UID-Data-Type:
              schema:
                type: "string"
                minLength: 1

  "/any-object":
    post:
      operationId: "retrieve_any_object_from_request_body"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AnyObject"
      responses:
        "200":
          description: "Free form object from request."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnyObject"

components:
  schemas:
    AnyObject:
      type: "object"
      additionalProperties: true

    UniqueStrArray:
      type: "array"
      items:
        type: "string"
        minLength: 1
      minItems: 1
      uniqueItems: true

    NestedObjectDataItem:
      type: "object"
      properties:
        key:
          type: "string"
          enum: ["value1", "value2", "value3"]
        any_data:
          $ref: "#/components/schemas/AnyObject"
      required: ["key", "any_data"]

    NestedObjectData:
      type: "object"
      properties:
        data_item:
          $ref: "#/components/schemas/NestedObjectDataItem"
        data_items:
          type: "array"
          items:
            $ref: "#/components/schemas/NestedObjectDataItem"
        str_items:
          $ref: "#/components/schemas/UniqueStrArray"
      required: ["data_item", "data_items", "str_items"]

    NestedObject:
      type: "object"
      properties:
        uid:
          type: "string"
          format: "uuid"
        type:
          type: "string"
          minLength: 1
        data:
          $ref: "#/components/schemas/NestedObjectData"
        any_data:
          $ref: "#/components/schemas/AnyObject"
      required: ["uid", "type", "data", "any_data"]

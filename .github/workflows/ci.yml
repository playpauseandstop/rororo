name: "ci"

on:
  push:
    branches: ["master"]
    tags: ["v*"]
  pull_request:
    branches: ["master"]

env:
  COVERALLS_VERSION: "2.0.0"
  DEV_PYTHON_VERSION: "3.8"
  POETRY_VERSION: "1.0.5"
  TOX_GH_ACTIONS_VERSION: "1.2.0"
  TOX_VERSION: "3.14.6"
  TWINE_VERSION: "3.1.1"

jobs:
  dev:
    name: "Verify package is installed well"

    strategy:
      matrix:
        os: ["ubuntu-latest", "macos-latest"]

    runs-on: "${{ matrix.os }}"

    steps:
      - uses: "actions/checkout@v2.0.0"

      - name: "Install Python"
        uses: "actions/setup-python@v1.2.0"
        with:
          python-version: "${{ env.DEV_PYTHON_VERSION }}"

      - name: "Install poetry"
        uses: "dschep/install-poetry-action@v1.3"
        with:
          version: "${{ env.POETRY_VERSION }}"

      - name: "Install package"
        run: "poetry install --no-dev"

      - name: "Import package"
        run: "poetry run python -c 'import rororo'"

  test:
    needs: "dev"
    name: "Python ${{ matrix.python-version }}"

    strategy:
      matrix:
        python-version: ["3.6", "3.7", "3.8"]

    runs-on: "ubuntu-latest"

    services:
      redis:
        image: "redis:5.0.8-alpine"
        ports:
          - "6379/tcp"
        options: "--entrypoint redis-server"

    steps:
      - uses: "actions/checkout@v2.0.0"

      - name: "Install Python"
        uses: "actions/setup-python@v1.2.0"
        with:
          python-version: "${{ matrix.python-version }}"

      - name: "Install poetry"
        uses: "dschep/install-poetry-action@v1.3"
        with:
          version: "${{ env.POETRY_VERSION }}"
          create_virtualenvs: true

      - name: "Install package"
        run: |
          poetry config virtualenvs.in-project true
          poetry install --no-dev
          python -m pip install tox==${{ env.TOX_VERSION }} tox-gh-actions==${{ env.TOX_GH_ACTIONS_VERSION }}

      - name: "Install depencencies"
        run: |
          sudo apt install -y locales-all

      - name: "Cache pre-commit"
        if: "matrix.python-version == env.DEV_PYTHON_VERSION"
        uses: "actions/cache@v1.1.2"
        with:
          path: "~/.cache/pre-commit"
          key: "pre-commit-${{ matrix.python-version }}-${{ hashFiles('.pre-commit-config.yaml') }}"

      - name: "Run pre-commit"
        if: "matrix.python-version == env.DEV_PYTHON_VERSION"
        uses: "pre-commit/action@v1.0.1"

      - name: "Validate OpenAPI schemas"
        if: "matrix.python-version == env.DEV_PYTHON_VERSION"
        run: |
          poetry run python -m openapi_spec_validator examples/hobotnica/openapi.yaml
          poetry run python -m openapi_spec_validator examples/petstore/petstore-expanded.yaml
          poetry run python -m openapi_spec_validator examples/todobackend/openapi.yaml
          poetry run python -m openapi_spec_validator tests/openapi.json
          poetry run python -m openapi_spec_validator tests/openapi.yaml

      - name: "Run tests"
        run: |
          python -m tox
        env:
          REDIS_URL: "redis://localhost:${{ job.services.redis.ports[6379] }}/0"

      - name: "Send report to coveralls"
        if: "matrix.python-version == env.DEV_PYTHON_VERSION"
        env:
          COVERALLS_REPO_TOKEN: "${{ secrets.COVERALLS_REPO_TOKEN }}"
        run: |
          python -m pip install coveralls==${{ env.COVERALLS_VERSION }}
          python -m coveralls

  package:
    needs: "test"
    name: "Build & deploy package"

    runs-on: "ubuntu-latest"

    steps:
      - uses: "actions/checkout@v2.0.0"

      - name: "Install Python"
        uses: "actions/setup-python@v1.2.0"
        with:
          python-version: "${{ env.DEV_PYTHON_VERSION }}"

      - name: "Install poetry"
        uses: "dschep/install-poetry-action@v1.3"
        with:
          version: "${{ env.POETRY_VERSION }}"
          create_virtualenvs: true

      - name: "Build package"
        run: "poetry build"

      - name: "Check package"
        run: |
          python -m pip install twine==${{ env.TWINE_VERSION }}
          python -m twine check dist/*

      - name: "Publish package"
        if: "github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags')"
        uses: "pypa/gh-action-pypi-publish@v1.1.0"
        with:
          user: "${{ secrets.PYPI_USERNAME }}"
          password: "${{ secrets.PYPI_PASSWORD }}"

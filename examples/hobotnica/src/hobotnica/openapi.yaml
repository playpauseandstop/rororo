openapi: "3.0.2"

info:
  title: "Hobotnica API"
  description: |
    Reduced Hobotnica API schema as rororo example app.
  version: "1.0.0"
  contact:
    name: "Igor Davydenko (developer)"
    url: "https://igordavydenko.com"
    email: "iam@igordavydenko.com"
  license:
    name: "BSD-3-Clause"
    url: "https://opensource.org/licenses/BSD-3-Clause"

servers:
  - url: "/api"

x-default-responses: &default_responses
  "422":
    $ref: "#/components/responses/ValidationError"
  default:
    $ref: "#/components/responses/DefaultResponse"

paths:
  "/public/references":
    get:
      operationId: "list_all_references"
      summary: "List references for UI needs"
      tags: ["public"]
      security: []
      responses:
        <<: *default_responses
        "200":
          description: "References list"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnyObject"

  "/repositories":
    get:
      operationId: "list_repositories"
      summary: "List user repositories registered in Hobotnica"
      tags: ["repositories"]
      security:
        - jwt: []
        - personalToken: []
      parameters:
        - $ref: "#/components/parameters/GitHubUsername"
      responses:
        <<: *default_responses
        "200":
          description: "Available repositories"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Repository"

    post:
      operationId: "create_repository"
      summary: "Add new user repository to Hobotnica"
      tags: ["repositories"]
      parameters:
        - $ref: "#/components/parameters/GitHubUsername"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewRepository"
      responses:
        <<: *default_responses
        "201":
          description: "Added repository details"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Repository"

  "/repositories/favorites":
    get:
      operationId: "list_favorites_repositories"
      summary: "List favorites respositories for logged in user (not implemented yet)"
      tags: ["repositories"]
      parameters:
        - $ref: "#/components/parameters/GitHubUsername"
        - $ref: "#/components/parameters/Order"
      responses:
        <<: *default_responses
        "204":
          description: "Favorite repositories (not implemented yet)"

  "/repositories/{owner}":
    parameters: &repository_owner_parameters
      - $ref: "#/components/parameters/RepositoryOwner"

    get:
      operationId: "list_owner_repositories"
      summary: "List repositories owned by user"
      tags: ["repositories"]
      security:
        - basic: []
      responses:
        <<: *default_responses
        "200":
          description: "Repositories list"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Repository"

  "/repositories/{owner}/env":
    parameters: *repository_owner_parameters

    get:
      operationId: "retrieve_owner_env"
      summary: "Retrieve common environment vars for user"
      tags: ["environment"]
      security:
        - basic: []
      responses:
        <<: *default_responses
        "200":
          description: "Owner environment vars"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnyObject"

  "/repositories/{owner}/{name}":
    parameters: &repository_owner_name_parameters
      - $ref: "#/components/parameters/RepositoryOwner"
      - $ref: "#/components/parameters/RepositoryName"

    get:
      operationId: "retrieve_repository"
      summary: "Retrieve details of user repository"
      tags: ["repositories"]
      security:
        - jwt: []
          personalToken: []
      parameters:
        - $ref: "#/components/parameters/GitHubUsername"
      responses:
        <<: *default_responses
        "200":
          description: "Repository details"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Repository"

  "/repositories/{owner}/{name}/env":
    parameters: *repository_owner_name_parameters

    get:
      operationId: "retrieve_repository_env"
      summary: "Retrieve common env vars for the repository"
      tags: ["environment"]
      parameters:
        - $ref: "#/components/parameters/GitHubUsername"
      responses:
        <<: *default_responses
        "200":
          description: "Repository environment vars"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnyObject"

components:
  parameters:
    GitHubUsername:
      name: "X-GitHub-Username"
      in: "header"
      required: true
      schema:
        $ref: "#/components/schemas/NonEmptyString"

    Order:
      name: "order"
      in: "query"
      required: false
      schema:
        $ref: "#/components/schemas/Order"

    RepositoryOwner:
      name: "owner"
      in: "path"
      required: true
      schema:
        $ref: "#/components/schemas/RepositoryOwner"

    RepositoryName:
      name: "name"
      in: "path"
      required: true
      schema:
        $ref: "#/components/schemas/RepositoryName"

  responses:
    DefaultResponse:
      description: "Default error response"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/DefaultResponse"

    ValidationError:
      description: "Validation error response"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ValidationError"

  schemas:
    AnyObject:
      type: "object"
      additionalProperties: true

    NonEmptyString:
      type: "string"
      minLength: 1

    PositiveInteger:
      type: "integer"
      format: "int64"

    Order:
      type: "string"
      enum: ["date", "status"]
      default: "date"

    RepositoryOwner:
      type: "string"
      minLength: 3

    RepositoryName:
      type: "string"
      minLength: 3

    RepositoryJob:
      type: "string"
      enum: ["test", "deploy"]

    DefaultResponse:
      type: "object"
      properties:
        detail:
          $ref: "#/components/schemas/NonEmptyString"
      required: ["detail"]

    ValidationErrorItem:
      type: "object"
      properties:
        loc:
          type: "array"
          items:
            oneOf:
              - $ref: "#/components/schemas/NonEmptyString"
              - $ref: "#/components/schemas/PositiveInteger"
          minItems: 1
        message:
          $ref: "#/components/schemas/NonEmptyString"

    ValidationError:
      type: "array"
      items:
        $ref: "#/components/schemas/ValidationErrorItem"
      minItems: 1
      uniqueItems: true

    NewRepository:
      type: "object"
      properties:
        owner:
          $ref: "#/components/schemas/NonEmptyString"
        name:
          $ref: "#/components/schemas/NonEmptyString"
      required: ["owner", "name"]

    Repository:
      type: "object"
      properties:
        uid:
          type: "string"
          format: "uuid"
        owner:
          $ref: "#/components/schemas/NonEmptyString"
        name:
          $ref: "#/components/schemas/NonEmptyString"
        jobs:
          type: "array"
          description: "List of registered jobs for the repository"
          items:
            $ref: "#/components/schemas/RepositoryJob"
          minItems: 1
        status:
          type: "string"
          enum: ["cloning", "ready", "running"]
      required: ["uid", "owner", "name", "jobs", "status"]

  securitySchemes:
    basic:
      type: "http"
      scheme: "basic"

    personalToken:
      type: "apiKey"
      in: "header"
      name: "X-GitHub-Personal-Token"

    jwt:
      type: "http"
      scheme: "bearer"
      bearerFormat: "JWT"

security:
  - personalToken: []

tags:
  - name: "repositories"
    description: "Repositories endpoints"

  - name: "environment"
    description: "Environment endpoints"

  - name: "public"
    description: "Public endpoints"
